<?php

class DCG_Admin {
  public function __construct() {
    add_action('admin_menu', array($this, 'add_admin_menu'));
    add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_scripts'));
    add_action('wp_ajax_dcg_generate_content', array($this, 'generate_content'));
    add_action('wp_ajax_dcg_delete_content', array($this, 'delete_content'));
    add_action('init', array($this, 'add_post_meta_flag'));
  }

  public function add_post_meta_flag() {
    register_meta('post', '_dcg_generated', array(
      'type' => 'boolean',
      'single' => true,
      'show_in_rest' => false,
    ));
  }

  public function add_admin_menu() {
    add_menu_page(
      'Dummy Content Generator',
      'Dummy Content',
      'manage_options',
      'dummy-content-generator',
      array($this, 'render_admin_page'),
      'dashicons-database-add',
      99999
    );
  }

  public function enqueue_admin_scripts($hook) {
    if ('toplevel_page_dummy-content-generator' !== $hook) {
      return;
    }

    wp_enqueue_style('dcg-admin-style', DCG_PLUGIN_URL . 'assets/css/admin.css', array(), DCG_VERSION);
    wp_enqueue_script('dcg-admin-script', DCG_PLUGIN_URL . 'assets/js/admin.js', array('jquery'), DCG_VERSION, true);
    wp_localize_script('dcg-admin-script', 'dcgAjax', array(
      'ajaxurl' => admin_url('admin-ajax.php'),
      'nonce' => wp_create_nonce('dcg_nonce')
    ));
  }

  public function render_admin_page() {
    $post_types = get_post_types(array('public' => true), 'objects');
?>
    <div class="wrap">
      <h1>Dummy Content Generator</h1>
      <form id="dcg-generator-form" class="dcg-form">
        <?php wp_nonce_field('dcg_nonce', 'dcg_nonce'); ?>

        <div class="dcg-form-group">
          <label for="post_type">Post Type:</label>
          <select name="post_type" id="post_type" required>
            <?php foreach ($post_types as $post_type): ?>
              <option value="<?php echo esc_attr($post_type->name); ?>">
                <?php echo esc_html($post_type->labels->singular_name); ?>
              </option>
            <?php endforeach; ?>
          </select>
        </div>

        <div class="dcg-form-group">
          <label for="post_count">Number of Posts:</label>
          <input type="number" name="post_count" id="post_count" min="1" max="50" value="25" required>
        </div>

        <div class="dcg-form-group">
          <label>
            <input type="checkbox" name="include_html" id="include_html" checked>
            Include HTML in content
          </label>
        </div>

        <div class="dcg-form-group">
          <label>
            <input type="checkbox" name="featured_image" id="featured_image" checked>
            Add featured images
          </label>
        </div>

        <div class="dcg-form-group">
          <label>
            <input type="checkbox" name="content_images" id="content_images" checked>
            Add images in content (max 3)
          </label>
        </div>

        <button type="submit" class="button button-primary">Generate Content</button>
      </form>

      <div class="dcg-delete-section">
        <h2>Delete Generated Content</h2>
        <p>This will permanently delete all content generated by this plugin.</p>
        <form id="dcg-delete-form">
          <?php wp_nonce_field('dcg_delete_nonce', 'dcg_delete_nonce'); ?>
          <button type="submit" class="button button-danger">Delete All Generated Content</button>
        </form>
      </div>

      <div id="dcg-progress" style="display: none;">
        <p>Processing... Please wait.</p>
        <div class="progress-bar"></div>
      </div>
      <div id="dcg-results"></div>
    </div>
<?php
  }

  public function generate_content() {
    check_ajax_referer('dcg_nonce', 'nonce');

    if (!current_user_can('manage_options')) {
      wp_send_json_error('Unauthorized access');
    }

    $post_type = sanitize_text_field($_POST['post_type']);
    $post_count = intval($_POST['post_count']);
    $include_html = isset($_POST['include_html']) ? true : false;
    $featured_image = isset($_POST['featured_image']) ? true : false;
    $content_images = isset($_POST['content_images']) ? true : false;

    $generated_posts = array();

    for ($i = 0; $i < $post_count; $i++) {
      $post_data = array(
        'post_title' => $this->generate_title(),
        'post_content' => $this->generate_content_text($include_html, $content_images),
        'post_status' => 'publish',
        'post_type' => $post_type,
        'post_author' => get_current_user_id()
      );

      $post_id = wp_insert_post($post_data);

      if ($post_id && !is_wp_error($post_id)) {
        update_post_meta($post_id, '_dcg_generated', true);

        if ($featured_image) {
          $this->add_random_image($post_id);
        }
        $generated_posts[] = $post_id;
      }
    }

    wp_send_json_success(array(
      'message' => sprintf('Successfully generated %d posts', count($generated_posts)),
      'posts' => $generated_posts
    ));
  }

  public function generate_title() {
    $words = array(
      'Creative',
      'Innovative',
      'Strategic',
      'Dynamic',
      'Sustainable',
      'Digital',
      'Global',
      'Local',
      'Modern',
      'Traditional',
      'Future',
      'Development',
      'Solutions',
      'Insights',
      'Perspectives'
    );

    shuffle($words);
    return implode(' ', array_slice($words, 0, rand(2, 4)));
  }

  public function generate_content_text($include_html = false, $include_images = false) {
    $paragraphs = array(
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',
      'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.',
      'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium.',
      'Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.',
      'Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit.'
    );

    $headings = array(
      'Getting Started',
      'The Main Concept',
      'Understanding the Process',
      'Key Features',
      'Important Considerations',
      'Final Thoughts',
      'Additional Information'
    );

    $lists = array(
      array('First point to consider', 'Second important aspect', 'Third key element'),
      array('Primary objective', 'Secondary goal', 'Additional targets'),
      array('Initial step', 'Following procedure', 'Final phase')
    );

    $blockquotes = array(
      'Success is not final, failure is not fatal: it is the courage to continue that counts.',
      'Innovation distinguishes between a leader and a follower.',
      'The best way to predict the future is to create it.'
    );

    $content = '';
    $num_sections = rand(4, 8);

    for ($i = 0; $i < $num_sections; $i++) {
      $element_type = rand(1, 5);

      if ($include_html) {
        switch ($element_type) {
          case 1: // Heading
            $heading_level = rand(2, 4);
            $content .= sprintf(
              '<h%d>%s</h%d>',
              $heading_level,
              $headings[array_rand($headings)],
              $heading_level
            );
            break;

          case 2: // Paragraph
            $content .= '<p>' . $paragraphs[array_rand($paragraphs)] . '</p>';
            break;

          case 3: // List
            $list_type = rand(0, 1) ? 'ul' : 'ol';
            $list_items = $lists[array_rand($lists)];
            $content .= "<{$list_type}>";
            foreach ($list_items as $item) {
              $content .= "<li>{$item}</li>";
            }
            $content .= "</{$list_type}>";
            break;

          case 4: // Blockquote
            $content .= '<blockquote>' . $blockquotes[array_rand($blockquotes)] . '</blockquote>';
            break;

          case 5: // Paragraph with strong/em
            $p = $paragraphs[array_rand($paragraphs)];
            $words = explode(' ', $p);
            $random_start = rand(0, count($words) - 3);
            $words[$random_start] = '<strong>' . $words[$random_start];
            $words[$random_start + 2] = $words[$random_start + 2] . '</strong>';
            $content .= '<p>' . implode(' ', $words) . '</p>';
            break;
        }

        // Add images with varying frequency and sizes
        if ($include_images && $i < 3 && rand(0, 2) === 1) {
          $content .= $this->get_random_image_html();
        }
      } else {
        // Plain text version
        switch ($element_type) {
          case 1:
            $content .= strtoupper($headings[array_rand($headings)]) . "\n\n";
            break;
          case 2:
          case 5:
            $content .= $paragraphs[array_rand($paragraphs)] . "\n\n";
            break;
          case 3:
            $list_items = $lists[array_rand($lists)];
            foreach ($list_items as $index => $item) {
              $content .= ($index + 1) . ". {$item}\n";
            }
            $content .= "\n";
            break;
          case 4:
            $content .= "> " . $blockquotes[array_rand($blockquotes)] . "\n\n";
            break;
        }

        if ($include_images && $i < 3 && rand(0, 2) === 1) {
          $content .= $this->get_random_image_html() . "\n\n";
        }
      }
    }

    return $content;
  }

  public function get_random_image_html() {
    // Different aspect ratios and sizes
    $sizes = array(
      array(800, 600),  // 4:3
      array(1200, 800), // 3:2
      array(1000, 1000), // 1:1
      array(900, 1200),  // 3:4 (portrait)
      array(1920, 1080), // 16:9
    );

    $size = $sizes[array_rand($sizes)];
    $width = $size[0];
    $height = $size[1];

    // Add a random seed to ensure different images
    $seed = rand(1, 1000);
    return sprintf(
      '<img src="https://picsum.photos/seed/%d/%d/%d" alt="Random image" style="max-width: 100%%; height: auto;" />',
      $seed,
      $width,
      $height
    );
  }

  public function add_random_image($post_id) {
    // Use 16:9 aspect ratio for featured images
    $width = 1920;
    $height = 1080;
    $seed = rand(1, 1000);
    $image_url = sprintf('https://picsum.photos/seed/%d/%d/%d', $seed, $width, $height);

    $upload_dir = wp_upload_dir();
    $image_data = file_get_contents($image_url);

    if ($image_data === false) {
      return false;
    }

    $filename = 'dcg-' . uniqid() . '.jpg';
    $file = $upload_dir['path'] . '/' . $filename;

    file_put_contents($file, $image_data);

    $wp_filetype = wp_check_filetype($filename, null);

    $attachment = array(
      'post_mime_type' => $wp_filetype['type'],
      'post_title' => sanitize_file_name($filename),
      'post_content' => '',
      'post_status' => 'inherit'
    );

    $attach_id = wp_insert_attachment($attachment, $file, $post_id);

    if ($attach_id) {
      require_once(ABSPATH . 'wp-admin/includes/image.php');
      $attach_data = wp_generate_attachment_metadata($attach_id, $file);
      wp_update_attachment_metadata($attach_id, $attach_data);
      set_post_thumbnail($post_id, $attach_id);
    }

    return $attach_id;
  }

  public function delete_content() {
    check_ajax_referer('dcg_delete_nonce', 'nonce');

    if (!current_user_can('manage_options')) {
      wp_send_json_error('Unauthorized access');
    }

    $args = array(
      'post_type' => 'any',
      'posts_per_page' => -1,
      'meta_key' => '_dcg_generated',
      'meta_value' => true,
    );

    $query = new WP_Query($args);
    $deleted_count = 0;

    if ($query->have_posts()) {
      while ($query->have_posts()) {
        $query->the_post();
        $post_id = get_the_ID();

        // Delete featured image and any inline images
        $featured_image_id = get_post_thumbnail_id($post_id);
        if ($featured_image_id) {
          wp_delete_attachment($featured_image_id, true);
        }

        // Delete the post
        wp_delete_post($post_id, true);
        $deleted_count++;
      }
    }

    wp_reset_postdata();

    wp_send_json_success(array(
      'message' => sprintf('Successfully deleted %d items', $deleted_count),
      'count' => $deleted_count
    ));
  }
}
